#BlueJ class context
comment0.target=Recognizer
comment0.text=\r\n\ This\ class\ performs\ unistroke\ handwriting\ recognition\ using\ an\ algorithm\r\n\ known\ as\ "elastic\ matching."\r\n\ \r\n\ @author\ Dave\ Berque\r\n\ @version\ August,\ 2004\ Slightly\ modified\ by\ David\ E.\ Maharry\ and\ Carl\ Singer\r\n\ \ \ \ \ \ \ \ \ \ 10/27/2004\r\n\ \r\n
comment1.params=
comment1.target=Recognizer()
comment1.text=\r\n\ Constructor\ for\ the\ recognizer\ class.\ Sets\ up\ the\ arrays\ and\ loads\ the\r\n\ base\ set\ from\ an\ existing\ data\ file\ which\ is\ assumed\ to\ have\ the\ right\r\n\ number\ of\ points\ in\ it.\ The\ file\ is\ organized\ so\ that\ there\ are\ 150\r\n\ points\ for\ stroke\ 0\ followed\ by\ 150\ points\ for\ stroke\ 1,\ ...\ 150\ poinpts\r\n\ for\ stroke\ 9.\ Each\ stroke\ is\ organized\ as\ an\ alternating\ series\ of\ x,\ y\r\n\ pairs.\ For\ example,\ stroke\ 0\ consists\ of\ 300\ lines\ with\ the\ first\ line\r\n\ being\ x0\ for\ stroke\ 0,\ the\ next\ line\ being\ y0\ for\ stroke\ 0,\ the\ next\ line\r\n\ being\ x1\ for\ stroke\ 0\ and\ so\ on.\r\n
comment10.params=digitToCompare
comment10.target=int\ computeScore(int)
comment11.params=
comment11.target=int\ findMatch()
comment11.text=\r\n\ findMatch\ -\ Finds\ and\ returns\ the\ index\ (an\ int)\ of\ the\ base\ set\ pattern\r\n\ which\ most\ closely\ matches\ the\ user\ stroke.\r\n
comment12.params=
comment12.target=void\ resetUserStroke()
comment13.params=
comment13.target=int\ numUserPoints()
comment14.params=i
comment14.target=int\ getUserPointX(int)
comment15.params=i
comment15.target=int\ getUserPointY(int)
comment16.params=newPoint
comment16.target=void\ addUserPoint(java.awt.Point)
comment2.params=
comment2.target=int\ findMaxX()
comment3.params=
comment3.target=int\ findMaxY()
comment4.params=
comment4.target=int\ findMinX()
comment4.text=\ variable\ max\ hold\ the\ first\ value\ and\ run\ the\ for\ loop\ through\ the\ remaining\r\n\ elements\ to\ found\ the\ largest\ y\ by\ comparing\ and\ assigning\ new\ higher\ \r\n\ y\ value\ to\ max\ when\ found\ then\ return\ max\ \ \ \ \r\n
comment5.params=
comment5.target=int\ findMinY()
comment5.text=\ variable\ min\ hold\ the\ first\ value\ and\ run\ the\ for\ loop\ through\ the\ remaining\r\n\ elements\ to\ found\ the\ smallest\ x\ by\ comparing\ and\ assigning\ new\ smaller\ \r\n\ x\ value\ to\ min\ when\ found\ then\ return\ min\ \ \ \ \r\n
comment6.params=
comment6.target=void\ translate()
comment6.text=\r\n\ translate\ -\ Translates\ the\ points\ in\ the\ userStroke\ array\ by\ sliding\ them\r\n\ as\ far\ to\ the\ upper-left\ as\ possible.\ It\ does\ this\ by\ finding\ the\ minX\r\n\ value\ and\ the\ minY\ value.\ Then\ each\ point\ (x,\ y)\ is\ replaced\ with\ the\r\n\ point\ (x-minX,\ y-minY).\ Note\:\ you\ can\ use\ the\ translate\ method\ of\ the\r\n\ Point\ class\r\n
comment7.params=
comment7.target=void\ scale()
comment8.params=
comment8.target=void\ insertOnePoint()
comment8.text=\r\n\ insertOnePoint\ -\ inserts\ a\ new\ point\ between\ the\ two\ points\ that\ are\ the\r\n\ farthest\ apart\ in\ the\ userStroke\ array.\ There\ must\ be\ at\ least\ two\ points\r\n\ in\ the\ array\r\n
comment9.params=
comment9.target=void\ normalizeNumPoints()
comment9.text=\r\n\ normalizeNumPoints\ -\ Adds\ points\ to\ the\ userStroke\ by\ inserting\ points\r\n\ repeatedly\ until\ there\ are\ STROKESIZE\ points\ in\ the\ stroke\r\n
numComments=17
